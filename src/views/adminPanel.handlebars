<head>
<style>
  .admin-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 2rem;
    background: #f8f9fa;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }
  
  .admin-title {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 2rem;
    font-size: 2.2rem;
  }
  
  .section-title {
    color: #4a90e2;
    border-bottom: 2px solid #eee;
    padding-bottom: 0.5rem;
    margin: 2rem 0 1rem;
  }
  
  .product-form {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    margin-bottom: 3rem;
  }
  
  .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #555;
  }
  
  .form-control {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    transition: border 0.3s;
  }
  
  .form-control:focus {
    outline: none;
    border-color: #4a90e2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
  }
  
  .btn {
    padding: 0.8rem 1.5rem;
    background: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .btn:hover {
    background: #3a7bc8;
    transform: translateY(-2px);
  }
  
  .btn-danger {
    background: #e74c3c;
  }
  
  .btn-danger:hover {
    background: #c0392b;
  }
  
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .product-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    transition: transform 0.3s;
  }
  
  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .product-title {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    color: #2c3e50;
  }
  
  .product-price {
    font-weight: bold;
    color: #27ae60;
  }
  
  .product-stock {
    color: #7f8c8d;
    font-size: 0.9rem;
  }
  
  .product-actions {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
  }
</style>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  
  <!-- Incluir SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<div class="admin-container">
  <h1 class="admin-title">Panel de Administración</h1>
  
  <h2 class="section-title">Agregar Nuevo Producto</h2>
  <div class="product-form">
    <div class="form-grid">
      <div class="form-group">
        <label for="title">Título</label>
        <input type="text" id="title" class="form-control" placeholder="Nombre del producto">
      </div>
      <div class="form-group">
        <label for="price">Precio</label>
        <input type="number" id="price" class="form-control" placeholder="Precio en USD">
      </div>
      <div class="form-group">
        <label for="stock">Stock</label>
        <input type="number" id="stock" class="form-control" placeholder="Cantidad disponible">
      </div>
      <div class="form-group">
        <label for="category">Categoría</label>
        <input type="text" id="category" class="form-control" placeholder="Categoría">
      </div>
    </div>
    <div class="form-group">
      <label for="description">Descripción</label>
      <textarea id="description" class="form-control" rows="3" placeholder="Descripción detallada"></textarea>
    </div>
    <div class="form-group">
  <label for="status">Estado</label>
  <select id="status" class="form-control">
    <option value="true">Activo</option>
    <option value="false">Inactivo</option>
  </select>
</div>
    <div class="form-group">
      <label for="thumbnail">Imagen (URL)</label>
      <input type="text" id="thumbnail" class="form-control" placeholder="https://ejemplo.com/imagen.jpg">
    </div>
    <button class="btn" onclick="addProduct()">Agregar Producto</button>
  </div>
  
  <h2 class="section-title">Productos Existentes</h2>
  <div class="products-grid">
    {{#each products}}
      <div class="product-card" data-id="{{this._id}}">
        <h3 class="product-title">{{this.title}}</h3>
        <p>{{this.description}}</p>
        <p class="product-price">${{this.price}}</p>
        <p class="product-stock">Stock: {{this.stock}} unidades</p>
        <div class="product-actions">
          <button class="btn" onclick="editProductPrompt('{{this._id}}')">Editar</button>
          <button class="btn btn-danger" onclick="deleteProduct('{{this._id}}')">Eliminar</button>
        </div>
      </div>
    {{else}}
      <p>No hay productos registrados.</p>
    {{/each}}
  </div>
</div>

<script>
  // Configuración base
  const API_BASE_URL = '/api/products';
  const authToken = localStorage.getItem('token') || '';

  // Headers comunes
  const commonHeaders = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${authToken}`
  };

  // Función para manejar errores
  async function handleResponse(response) {
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Error en la solicitud');
    }
    return response.json();
  }

  // Agregar producto
  async function addProduct() {
    try {
      const product = {
        title: document.getElementById('title').value,
        description: document.getElementById('description').value,
        price: parseFloat(document.getElementById('price').value),
        category: document.getElementById('category').value,
        stock: parseInt(document.getElementById('stock').value),
        thumbnail: document.getElementById('thumbnail').value || '',
        status: document.getElementById('status').value === 'true'
      };

      const response = await fetch(API_BASE_URL, {
        method: 'POST',
        headers: commonHeaders,
        body: JSON.stringify(product)
      });

      const data = await handleResponse(response);

      await Swal.fire('¡Éxito!', 'Producto agregado correctamente', 'success');
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      Swal.fire('Error', error.message, 'error');
    }
  }

  // Eliminar producto
  async function deleteProduct(id) {
    try {
      const result = await Swal.fire({
        title: '¿Estás seguro?',
        text: "Esta acción no se puede deshacer",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#4a90e2',
        cancelButtonColor: '#e74c3c',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      });

      if (!result.isConfirmed) return;

      const response = await fetch(`${API_BASE_URL}/${id}`, {
        method: 'DELETE',
        headers: commonHeaders
      });

      await handleResponse(response);

      await Swal.fire('¡Eliminado!', 'El producto fue eliminado', 'success');
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      Swal.fire('Error', error.message, 'error');
    }
  }

  // Editar producto
async function editProductPrompt(id) {
  try {
    // Obtener producto actual
    const response = await fetch(`${API_BASE_URL}/${id}`);
    const product = await handleResponse(response);

    // Configuración del modal mejorado
    const { value: formValues } = await Swal.fire({
      title: `<h3 style="color: #4a90e2">Editando: <strong>${product.title}</strong></h3>`,
      html: `
        <div style="text-align: left; margin-bottom: 1rem;">
          <p style="margin-bottom: 0.5rem; font-weight: 500;">Complete los campos a editar:</p>
        </div>
        <div class="form-group" style="margin-bottom: 1rem;">
          <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Título</label>
          <input id="swal-title" class="swal2-input" value="${product.title}" placeholder="Nuevo título">
        </div>
        <div class="form-group" style="margin-bottom: 1rem;">
          <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Descripción</label>
          <textarea id="swal-description" class="swal2-input" style="height: 80px; resize: vertical;" 
            placeholder="Nueva descripción">${product.description}</textarea>
        </div>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
          <div class="form-group">
            <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Precio ($)</label>
            <input id="swal-price" class="swal2-input" type="number" step="0.01" value="${product.price}">
          </div>
          <div class="form-group">
            <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Stock</label>
            <input id="swal-stock" class="swal2-input" type="number" value="${product.stock}">
          </div>
        </div>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
          <div class="form-group">
            <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Categoría</label>
            <input id="swal-category" class="swal2-input" value="${product.category}">
          </div>
          <div class="form-group">
            <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Estado</label>
            <select id="swal-status" class="swal2-input" style="width: 100%; padding: 0.5em;">
              <option value="true" ${product.status ? 'selected' : ''}>Activo</option>
              <option value="false" ${!product.status ? 'selected' : ''}>Inactivo</option>
            </select>
          </div>
        </div>
        <div class="form-group">
          <label style="display: block; margin-bottom: 0.3rem; font-weight: 500;">Imagen (URL)</label>
          <input id="swal-thumbnail" class="swal2-input" value="${product.thumbnail || ''}">
        </div>
      `,
      width: '700px',
      padding: '2rem',
      background: '#ffffff',
      backdrop: `
        rgba(0,0,0,0.4)
        url("/images/loading.gif")
        center left
        no-repeat
      `,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText: 'Guardar Cambios',
      cancelButtonText: 'Cancelar',
      confirmButtonColor: '#4a90e2',
      cancelButtonColor: '#e74c3c',
      customClass: {
        container: 'custom-swal-container',
        popup: 'custom-swal-popup',
        header: 'custom-swal-header',
        title: 'custom-swal-title',
        closeButton: 'custom-swal-close-button',
        content: 'custom-swal-content',
        input: 'custom-swal-input',
        actions: 'custom-swal-actions',
        confirmButton: 'custom-swal-confirm-button',
        cancelButton: 'custom-swal-cancel-button'
      },
      preConfirm: () => {
        return {
          title: document.getElementById('swal-title').value,
          description: document.getElementById('swal-description').value,
          price: parseFloat(document.getElementById('swal-price').value),
          stock: parseInt(document.getElementById('swal-stock').value),
          category: document.getElementById('swal-category').value,
          thumbnail: document.getElementById('swal-thumbnail').value,
          status: document.getElementById('swal-status').value === 'true'
        };
      }
    });

    if (!formValues) return;

    // Validación básica
    if (!formValues.title || !formValues.price || !formValues.stock) {
      throw new Error('Título, precio y stock son campos requeridos');
    }

    // Actualizar producto
    const updateResponse = await fetch(`${API_BASE_URL}/${id}`, {
      method: 'PUT',
      headers: commonHeaders,
      body: JSON.stringify(formValues)
    });

    await handleResponse(updateResponse);

    await Swal.fire({
      position: 'center',
      icon: 'success',
      title: '¡Producto actualizado!',
      showConfirmButton: false,
      timer: 1500,
      timerProgressBar: true,
      willClose: () => location.reload()
    });
    
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error al actualizar',
      text: error.message || 'No se pudo actualizar el producto',
      confirmButtonColor: '#e74c3c'
    });
  }
}
</script>
<style>
  .admin-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 2rem;
    background: #f8f9fa;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }
  
  .admin-title {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 2rem;
    font-size: 2.2rem;
  }
  
  .section-title {
    color: #4a90e2;
    border-bottom: 2px solid #eee;
    padding-bottom: 0.5rem;
    margin: 2rem 0 1rem;
  }
  
  .product-form {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    margin-bottom: 3rem;
  }
  
  .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #555;
  }
  
  .form-control {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    transition: border 0.3s;
  }
  
  .form-control:focus {
    outline: none;
    border-color: #4a90e2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
  }
  
  .btn {
    padding: 0.8rem 1.5rem;
    background: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .btn:hover {
    background: #3a7bc8;
    transform: translateY(-2px);
  }
  
  .btn-danger {
    background: #e74c3c;
  }
  
  .btn-danger:hover {
    background: #c0392b;
  }
  
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .product-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    transition: transform 0.3s;
  }
  
  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .product-title {
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
    color: #2c3e50;
  }
  
  .product-price {
    font-weight: bold;
    color: #27ae60;
  }
  
  .product-stock {
    color: #7f8c8d;
    font-size: 0.9rem;
  }
  
  .product-actions {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
  }
</style>

<div class="admin-container">
  <h1 class="admin-title">Panel de Administración</h1>
  
  <h2 class="section-title">Agregar Nuevo Producto</h2>
  <div class="product-form">
    <div class="form-grid">
      <div class="form-group">
        <label for="title">Título</label>
        <input type="text" id="title" class="form-control" placeholder="Nombre del producto">
      </div>
      <div class="form-group">
        <label for="price">Precio</label>
        <input type="number" id="price" class="form-control" placeholder="Precio en USD">
      </div>
      <div class="form-group">
        <label for="stock">Stock</label>
        <input type="number" id="stock" class="form-control" placeholder="Cantidad disponible">
      </div>
      <div class="form-group">
        <label for="category">Categoría</label>
        <input type="text" id="category" class="form-control" placeholder="Categoría">
      </div>
    </div>
    <div class="form-group">
      <label for="description">Descripción</label>
      <textarea id="description" class="form-control" rows="3" placeholder="Descripción detallada"></textarea>
    </div>
    <div class="form-group">
      <label for="thumbnail">Imagen (URL)</label>
      <input type="text" id="thumbnail" class="form-control" placeholder="https://ejemplo.com/imagen.jpg">
    </div>
    <button class="btn" onclick="addProduct()">Agregar Producto</button>
  </div>
  
  <h2 class="section-title">Productos Existentes</h2>
  <div class="products-grid">
    {{#each products}}
      <div class="product-card" data-id="{{this._id}}">
        <h3 class="product-title">{{this.title}}</h3>
        <p>{{this.description}}</p>
        <p class="product-price">${{this.price}}</p>
        <p class="product-stock">Stock: {{this.stock}} unidades</p>
        <div class="product-actions">
          <button class="btn" onclick="editProductPrompt('{{this._id}}')">Editar</button>
          <button class="btn btn-danger" onclick="deleteProduct('{{this._id}}')">Eliminar</button>
        </div>
      </div>
    {{else}}
      <p>No hay productos registrados.</p>
    {{/each}}
  </div>
</div>

<script>
  // Función para agregar producto
  async function addProduct() {
    const product = {
      title: document.getElementById('title').value,
      description: document.getElementById('description').value,
      price: parseFloat(document.getElementById('price').value),
      category: document.getElementById('category').value,
      stock: parseInt(document.getElementById('stock').value),
      thumbnail: document.getElementById('thumbnail').value || undefined
    };

    try {
      const response = await fetch('/api/products', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        },
        body: JSON.stringify(product)
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Error al agregar producto');
      }

      await Swal.fire({
        icon: 'success',
        title: '¡Producto agregado!',
        text: 'El producto se ha añadido correctamente',
        confirmButtonColor: '#4a90e2'
      });
      
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'No se pudo agregar el producto',
        confirmButtonColor: '#e74c3c'
      });
    }
  }

  // Función para eliminar producto
  async function deleteProduct(id) {
    try {
      const result = await Swal.fire({
        title: '¿Estás seguro?',
        text: "¡No podrás revertir esto!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#4a90e2',
        cancelButtonColor: '#e74c3c',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
      });

      if (!result.isConfirmed) return;

      const response = await fetch(`/api/products/${id}`, {
        method: 'DELETE',
        headers: { 
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        }
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Error al eliminar producto');
      }

      await Swal.fire({
        icon: 'success',
        title: '¡Eliminado!',
        text: 'El producto ha sido eliminado',
        confirmButtonColor: '#4a90e2'
      });
      
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'No se pudo eliminar el producto',
        confirmButtonColor: '#e74c3c'
      });
    }
  }

  // Función para editar producto
  async function editProductPrompt(id) {
    try {
      // Primero obtenemos el producto actual
      const response = await fetch(`/api/products/${id}`);
      const product = await response.json();

      if (!response.ok) {
        throw new Error(product.message || 'Error al obtener producto');
      }

      const { value: formValues } = await Swal.fire({
        title: 'Editar Producto',
        html:
          `<input id="swal-title" class="swal2-input" placeholder="Título" value="${product.title}">
           <input id="swal-description" class="swal2-input" placeholder="Descripción" value="${product.description || ''}">
           <input id="swal-price" class="swal2-input" placeholder="Precio" type="number" value="${product.price}">
           <input id="swal-stock" class="swal2-input" placeholder="Stock" type="number" value="${product.stock}">
           <input id="swal-category" class="swal2-input" placeholder="Categoría" value="${product.category || ''}">`,
        focusConfirm: false,
        showCancelButton: true,
        confirmButtonColor: '#4a90e2',
        cancelButtonColor: '#e74c3c',
        preConfirm: () => {
          return {
            title: document.getElementById('swal-title').value,
            description: document.getElementById('swal-description').value,
            price: parseFloat(document.getElementById('swal-price').value),
            stock: parseInt(document.getElementById('swal-stock').value),
            category: document.getElementById('swal-category').value
          };
        }
      });

      if (!formValues) return;

      const updateResponse = await fetch(`/api/products/${id}`, {
        method: 'PUT',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        },
        body: JSON.stringify(formValues)
      });

      const data = await updateResponse.json();

      if (!updateResponse.ok) {
        throw new Error(data.message || 'Error al actualizar producto');
      }

      await Swal.fire({
        icon: 'success',
        title: '¡Actualizado!',
        text: 'El producto se ha actualizado correctamente',
        confirmButtonColor: '#4a90e2'
      });
      
      location.reload();
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'No se pudo actualizar el producto',
        confirmButtonColor: '#e74c3c'
      });
    }
  }
</script>